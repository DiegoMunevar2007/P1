/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;
        private static int numeroComando=0;
        private static String condicional;
        private static String condicionalDo ="";
        private static boolean not = false;
        private static HashMap<String, ArrayList<String >> macroParametro = new HashMap<String, ArrayList<String >>();
        private static HashMap<String,List<String >> macroAcciones = new HashMap<String, List<String >>();
        private static Map<String,Integer > variables = new HashMap<String,Integer >();
        private static String macroActual = "";
        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

        void parseMacro(String input, List<String > parametros) throws ParseException {
          java.io.StringReader stringReader = new java.io.StringReader(input);
          ReInit(stringReader);
          inicialMacro(parametros);
  }

  final public void inicialMacro(List<String > parametros) throws ParseException {boolean parametro = false;
 int numero =0;
    jj_consume_token(WALK);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELEMENTO:{
      jj_consume_token(ELEMENTO);
parametro = true;
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(LPAR);
numero=valor();
if (parametro==true) {numero = Integer.parseInt(parametros.get(numero)); }
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
    walk_accion(numero);
}

  final public void inicial() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXEC:{
      exec();
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        var();
        break;
        }
      case MACRO:{
        definirMacro();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void exec() throws ParseException {
    jj_consume_token(EXEC);
bloque(true,1,"");
}

  final public void var() throws ParseException {String nombreVariable = "";
int numero;
    jj_consume_token(VAR);
    jj_consume_token(ELEMENTO);
try {
      nombreVariable = token.image;
    }
    catch(Exception e) {
    }
    jj_consume_token(IGUAL);
try { numero=valor(); variables.put(nombreVariable,numero); }
    catch (Exception e) { }
}

  final public int obtenerVar() throws ParseException {String nombreVariable = ""; int valorVariable;
    jj_consume_token(ELEMENTO);
try {
      nombreVariable = token.image;
      if (variables.containsKey(nombreVariable)) {
        valorVariable = variables.get(nombreVariable);
        {if ("" != null) return valorVariable;}
      } else {
        System.out.println("Variable " + nombreVariable + " no esta definida.");
      }
    }
    catch(Exception e) { }
    throw new Error("Missing return statement in function");
}

  final public void bloque(boolean ejecutar, int veces, String condicion) throws ParseException {ArrayList<String> acciones = new ArrayList<String>();
    ArrayList<Integer> comandosActuales = new ArrayList<Integer>();
    jj_consume_token(LBRAC);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TURNTOMY:
      case TURNTOTHE:
      case WALK:
      case JUMP:
      case DROP:
      case PICK:
      case GRAB:
      case LETGO:
      case POP:
      case MOVES:
      case NOP:
      case SAFEEXE:
      case IF:
      case DO:
      case REP:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      acciones = comando(acciones, comandosActuales);
    }
if (condicion.equals("")) {
            int i = 0;
            System.out.println("Aqui paso");
            while (i < veces) {
                ejecutarComando(comandosActuales, acciones, ejecutar);
                i++;
            }
        } else {
                boolean cond= llamarCondicional(condicion);
            while (cond == true) {
                ejecutarComando(comandosActuales, acciones, ejecutar);
                cond= llamarCondicional(condicion);
            }
            not=false;
        }
    jj_consume_token(RBRAC);
}

  final public boolean llamarCondicional(String condicion) throws ParseException {
boolean resultado = seleccionarCondicional(condicion);
    if (not==true) {
      {if ("" != null) return !resultado;}
    }
    else {
      {if ("" != null) return resultado;}
    }
    throw new Error("Missing return statement in function");
}

  final public String repeat() throws ParseException {String acciones;
    jj_consume_token(REP);
    jj_consume_token(VALOR);
acciones=token.image;
    jj_consume_token(TIMES);
{if ("" != null) return acciones;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String > comando(ArrayList<String >acciones,ArrayList<Integer >comandosActuales) throws ParseException {String accion;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WALK:{
      accion = walk();
numeroComando =1; comandosActuales.add(1); acciones.add(accion);
      break;
      }
    case JUMP:{
      accion = jump();
numeroComando =2;comandosActuales.add(2); acciones.add(accion);
      break;
      }
    case DROP:{
      accion = drop();
numeroComando =3; comandosActuales.add(3); acciones.add(accion);
      break;
      }
    case PICK:{
      accion = pick();
numeroComando = 4;comandosActuales.add(4); acciones.add(accion);
      break;
      }
    case GRAB:{
      accion = grab();
numeroComando =5;comandosActuales.add(5); acciones.add(accion);
      break;
      }
    case LETGO:{
      accion = letgo();
numeroComando =6; comandosActuales.add(6);acciones.add(accion);
      break;
      }
    case POP:{
      accion = pop();
numeroComando= 7; comandosActuales.add(7); acciones.add(accion);
      break;
      }
    case TURNTOMY:{
      accion = turntomy();
numeroComando =8; comandosActuales.add(8);acciones.add(accion);
      break;
      }
    case TURNTOTHE:{
      accion = turntothe();
numeroComando =9;comandosActuales.add(9); acciones.add(accion);
      break;
      }
    case MOVES:{
      moves(acciones);
numeroComando =10; comandosActuales.add(10);
      break;
      }
    case IF:{
      accion = condicional();
numeroComando=11; comandosActuales.add(11); acciones.add(accion);
      break;
      }
    case NOP:{
      accion = nop();
numeroComando=12; comandosActuales.add(12); acciones.add(accion);
      break;
      }
    case SAFEEXE:{
      safeexe();
numeroComando=13; comandosActuales.add(13);
      break;
      }
    case REP:{
      accion = repeat();
numeroComando=14; comandosActuales.add(14); acciones.add(accion);
      break;
      }
    case DO:{
      accion = dofun();
numeroComando=15; comandosActuales.add(15); acciones.add(accion);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return acciones;}
    throw new Error("Missing return statement in function");
}

  final public String dofun() throws ParseException {String resultado;
    jj_consume_token(DO);
    jj_consume_token(LPAR);
    resultado = obtenerCondicional();
    jj_consume_token(RPAR);
{if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public void leerThen(boolean ejecutar) throws ParseException {
    jj_consume_token(THEN);
    bloque(ejecutar,1, "");
}

  final public void leerElse(boolean ejecutar) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      bloque(ejecutar,1,"");
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
}

  final public void leerCondicionalFinal() throws ParseException {
    jj_consume_token(FI);
    jj_consume_token(SEMI);
}

  final public void ejecutarComando(ArrayList<Integer > comandosActuales,ArrayList<String > acciones, boolean ejecutar) throws ParseException {
if (ejecutar==true) {

    int posActual=0;
    for (int comando:comandosActuales) {
      if (comando==1) {
        walk_accion(Integer.parseInt(acciones.get(posActual)));
      }
      else if (comando==2) {
        jump_accion(Integer.parseInt(acciones.get(posActual)));
      }
          else if (comando==3) {
                drop_accion(Integer.parseInt(acciones.get(posActual)));
          }
          else if (comando==4) {
                pick_accion(Integer.parseInt(acciones.get(posActual)));
          }
          else if (comando==5) {
                grab_accion(Integer.parseInt(acciones.get(posActual)));
          }
          else if (comando==6) {
                letgo_accion(Integer.parseInt(acciones.get(posActual)));
          }
          else if (comando==7) {
                pop_accion(Integer.parseInt(acciones.get(posActual)));
          }
          else if (comando==8) {
                if (acciones.get(posActual).equals("Right")) {
                        turntomyright();
                }
                else if (acciones.get(posActual).equals("Left")) {
                        turntomyleft();
                }
                else if (acciones.get(posActual).equals("Back")) {
                        turntomyback();
                }
                else if (acciones.get(posActual).equals("Front")) {
                        turntomyfront();
                }
    }
        else if (comando==9) {
                if (acciones.get(posActual).equals("North")) {
                        turntothenorth();
                }
                else if (acciones.get(posActual).equals("South")) {
                        turntothesouth();
                }
                else if (acciones.get(posActual).equals("East")) {
                        turntotheeast();
                }
                else if (acciones.get(posActual).equals("West")) {
                        turntothewest();
                }
        }
        else if (comando==10) {
          int numeroElementos = acciones.size();
          for (int i=posActual; i<numeroElementos; i++) {
                if (acciones.get(i).equals("Forward")) {
                        movesforward();
                }
                else if (acciones.get(i).equals("Right")) {
                        movesRight();
                }
                else if (acciones.get(i).equals("Left")) {
                        movesLeft();
                }
                else if (acciones.get(i).equals("Back")) {
                        movesBack();
                }
                if (acciones.get(i).equals("end")) {
                  break;
        }
          }
        }
        else if (comando==11) {
          condicional= acciones.get(posActual);
          boolean condicionalFlag = seleccionarCondicional(condicional);
          if (not==true) {
            condicionalFlag = !condicionalFlag;
            not=false;
          }
           if (condicionalFlag==true)
                { leerThen(true); leerElse(false); }
           else { leerThen(false); leerElse(true);}
                                                                  leerCondicionalFinal();
        }
        else if (comando==12) {
          posActual++;
        }
        else if (comando==14) {
          int numero=Integer.parseInt(acciones.get(posActual));
          repExec(numero);
        }
        else if (comando==15) {
          String condicion= acciones.get(posActual);
          doExec(condicion);
        }
        else if (comando==16) {

        }
        posActual++;
}
  }
}

  final public void doExec(String condicion) throws ParseException {
    bloque(true,1,condicion);
    jj_consume_token(OD);
}

  final public void repExec(int numero) throws ParseException {
    bloque(true,numero,"");
    jj_consume_token(PER);
}

  final public boolean seleccionarCondicional(String condicional) throws ParseException {boolean retorno;
if (condicional.equals("isblocked(left)")) {
          retorno=isblockedleft();
        }
        else if (condicional.equals("isblocked(right)")) {
          retorno=isblockedright();
        }
        else if (condicional.equals("isblocked(front)")) {
          retorno= isblockedfront();
        }
        else if (condicional.equals("isblocked(back)")) {
          retorno=isblockedback();
        }
        else if (condicional.equals("isfacing(north)")) {
          retorno= isFacingNorth();
        }
        else if (condicional.equals("isfacing(south)")) {
          retorno= isFacingSouth();
        }
        else if (condicional.equals("isfacing(east)")) {
          retorno= isFacingEast();
        }
        else if (condicional.equals("isfacing(west)")) {
          retorno= isFacingWest();
        }
        else if (condicional.equals("zero(0)")) {
          retorno= zeroExec(condicional);
        }
        else if (condicional.equals("zero(size)")) {
          retorno= zeroExec(condicional);
  }
          else if (condicional.equals("zero(myx)")) {
          retorno= zeroExec(condicional);
  }
  else if (condicional.equals("zero(myy)")) {
          retorno= zeroExec(condicional);
  }
  else if (condicional.equals("zero(mychips)")) {
          retorno= zeroExec(condicional);
  }
  else if (condicional.equals("zero(myballoons)")) {
          retorno= zeroExec(condicional);
  }
  else if (condicional.equals("zero(balloonshere)")) {
          retorno= zeroExec(condicional);
  }
  else if (condicional.equals("zero(chipshere)")) {
          retorno= zeroExec(condicional);
  }
  else if (condicional.equals("zero(roomforchips)")) {
          retorno= zeroExec(condicional);
  }
  else {
  retorno= false;
}
{
  if (not==true) {
    retorno=!retorno;
    not=false;
  }
  {if ("" != null) return retorno;}
}
    throw new Error("Missing return statement in function");
}

  final public String turntomy() throws ParseException {String retorno;
    jj_consume_token(TURNTOMY);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
retorno="Right";
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
retorno="Left";
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
retorno="Back";
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
retorno="Front";
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  final public void turntomyright() throws ParseException {
if (world.facingNorth())
                                          { world.turnRight(); }
                                          else if (world.facingWest())
                                          { world.turnRight(); world.turnRight(); }
                                          else if (world.facingSouth())
                                          { world.turnRight(); world.turnRight(); world.turnRight(); }
}

  final public void turntomyleft() throws ParseException {
if (world.facingNorth())
                                  { world.turnRight(); world.turnRight(); world.turnRight(); }
                                  else if (world.facingEast())
                                  { world.turnRight(); world.turnRight(); }
                                  else if (world.facingSouth())
                                  { world.turnRight(); }
}

  final public void turntomyback() throws ParseException {
if (world.facingNorth())
                                { world.turnRight(); world.turnRight();  }
                                else if (world.facingEast())
                                { world.turnRight(); }
                                else if (world.facingWest())
                                { world.turnRight(); world.turnRight(); world.turnRight();  }
}

  final public void turntomyfront() throws ParseException {
if (world.facingEast())
                                {world.turnRight(); world.turnRight(); world.turnRight(); }
                                else if (world.facingSouth())
                                {world.turnRight(); world.turnRight(); }
                                else if (world.facingWest())
                                { world.turnRight();}
}

  final public String turntothe() throws ParseException {String Retorno ;
    jj_consume_token(TURNTOTHE);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
Retorno="North";
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
Retorno="South";
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
Retorno="East";
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
Retorno="West";
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
{if ("" != null) return Retorno;}
    throw new Error("Missing return statement in function");
}

  final public void turntothenorth() throws ParseException {
if (world.facingWest())
                        { world.turnRight(); }
                        else if (world.facingSouth())
                        { world.turnRight(); world.turnRight();  }
                        else if (world.facingEast())
                        {world.turnRight(); world.turnRight(); world.turnRight(); }
}

  final public void turntothesouth() throws ParseException {
if (world.facingNorth())
                                {world.turnRight(); world.turnRight(); }
                        else if (world.facingEast())
                                { world.turnRight();}
                        else if (world.facingWest())
                                { world.turnRight();world.turnRight();world.turnRight();}
}

  final public void turntotheeast() throws ParseException {
if (world.facingNorth())
                                {world.turnRight(); }
                        else if (world.facingWest())
                                {world.turnRight();world.turnRight(); }
                        else if (world.facingSouth())
                                {world.turnRight();world.turnRight();world.turnRight(); }
}

  final public void turntothewest() throws ParseException {
if (world.facingNorth())
                        { world.turnRight();world.turnRight();world.turnRight();}
                        else if (world.facingEast())
                        {world.turnRight();world.turnRight();}
                        else if (world.facingSouth())
                        {world.turnRight();}
}

  final public int valor() throws ParseException {int numero= 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR:
    case SIZE:
    case MYX:
    case MYY:
    case MYCHIPS:
    case MYBALLOONS:
    case BALLOONSHERE:
    case CHIPSHERE:
    case ROOMFORCHIPS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VALOR:{
        jj_consume_token(VALOR);
numero = Integer.parseInt(token.image); {if ("" != null) return numero;}
        break;
        }
      case SIZE:{
        jj_consume_token(SIZE);
numero = world.getN(); {if ("" != null) return numero;}
        break;
        }
      case MYX:{
        jj_consume_token(MYX);
numero = (int) world.getPosition().getX(); {if ("" != null) return numero;}
        break;
        }
      case MYY:{
        jj_consume_token(MYY);
numero = (int) world.getPosition().getY(); {if ("" != null) return numero;}
        break;
        }
      case MYCHIPS:{
        jj_consume_token(MYCHIPS);
numero = world.getMyChips(); {if ("" != null) return numero;}
        break;
        }
      case MYBALLOONS:{
        jj_consume_token(MYBALLOONS);
numero = world.getMyBalloons(); {if ("" != null) return numero;}
        break;
        }
      case BALLOONSHERE:{
        jj_consume_token(BALLOONSHERE);
numero = world.countBalloons(); {if ("" != null) return numero;}
        break;
        }
      case CHIPSHERE:{
        jj_consume_token(CHIPSHERE);
numero = world.chipsToPick(); {if ("" != null) return numero;}
        break;
        }
      case ROOMFORCHIPS:{
        jj_consume_token(ROOMFORCHIPS);
numero = world.freeSpacesForChips(); {if ("" != null) return numero;}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
numero=obtenerVar(); {if ("" != null) return numero;}
    }
    throw new Error("Missing return statement in function");
}

  final public String nop() throws ParseException {
    jj_consume_token(NOP);
    jj_consume_token(SEMI);
{if ("" != null) return "nop" ;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String > moves(ArrayList<String > acciones) throws ParseException {ArrayList<String > listaRetorno  = new ArrayList<String >();
    jj_consume_token(MOVES);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORWARD:{
      jj_consume_token(FORWARD);
acciones.add("Forward");
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
acciones.add("Right");
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
acciones.add("Left");
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
acciones.add("Back");
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 67:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      jj_consume_token(67);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FORWARD:{
        jj_consume_token(FORWARD);
acciones.add("Forward");
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
acciones.add("Right");
        break;
        }
      case LEFT:{
        jj_consume_token(LEFT);
acciones.add("Left");
        break;
        }
      case BACK:{
        jj_consume_token(BACK);
acciones.add("Back");
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
acciones.add("end");
  {if ("" != null) return listaRetorno;}
    throw new Error("Missing return statement in function");
}

  final public void movesforward() throws ParseException {
if (world.facingNorth())
                                                                 {world.up(); }
                                                                 else if (world.facingEast())
                                                                 {world.right(); }
                                                                 else if (world.facingSouth())
                                                                 {world.down(); }
                                                                 else if (world.facingWest())
                                                                 {world.left(); }
}

  final public void movesRight() throws ParseException {
if (world.facingNorth())
                                  {world.right(); }
                                  else if (world.facingEast())
                                  {world.down(); }
                                  else if (world.facingSouth())
                                  {world.left(); }
                                  else if (world.facingWest())
                                  {world.up(); }
}

  final public void movesLeft() throws ParseException {
if (world.facingNorth())
                                  {world.left(); }
                                  else if (world.facingEast())
                                  {world.up(); }
                                  else if (world.facingSouth())
                                  {world.right(); }
                                  else if (world.facingWest())
                                  {world.down(); }
}

  final public void movesBack() throws ParseException {
if (world.facingNorth())
                                  {world.down(); }
                                  else if (world.facingEast())
                                  {world.left(); }
                                  else if (world.facingSouth())
                                  {world.up(); }
                                  else if (world.facingWest())
                                  {world.right(); }
}

  final public String isblocked() throws ParseException {String listaRetorno;
    jj_consume_token(ISBLOCKED);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
      jj_consume_token(RPAR);
listaRetorno="isblocked(left)";
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
      jj_consume_token(RPAR);
listaRetorno="isblocked(right)";
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
      jj_consume_token(RPAR);
listaRetorno="isblocked(front)";
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
      jj_consume_token(RPAR);
listaRetorno="isblocked(back)";
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return listaRetorno;}
    throw new Error("Missing return statement in function");
}

  final public boolean isblockedleft() throws ParseException {
if (world.facingNorth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x-1,world.getPosition().y));} }
                                                                                else if (world.facingEast()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y-1));} }
                                                                                else if (world.facingSouth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x+1,world.getPosition().y));} }
                                                                                else if (world.facingWest()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y+1));} }
    throw new Error("Missing return statement in function");
}

  final public boolean isblockedright() throws ParseException {
if (world.facingNorth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x+1,world.getPosition().y));} }
                                                                                else if (world.facingEast()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y+1));} }
                                                                                else if (world.facingSouth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x-1,world.getPosition().y));} }
                                                                                else if (world.facingWest()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y-1));} }
    throw new Error("Missing return statement in function");
}

  final public boolean isblockedfront() throws ParseException {
if (world.facingNorth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y+1));} }
                                                                                else if (world.facingEast()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x+1,world.getPosition().y));} }
                                                                                else if (world.facingSouth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y-1));} }
                                                                                else if (world.facingWest()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x-1,world.getPosition().y));} }
    throw new Error("Missing return statement in function");
}

  final public boolean isblockedback() throws ParseException {
if (world.facingNorth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y-1));} }
                                                                                else if (world.facingEast()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x-1,world.getPosition().y));} }
                                                                                else if (world.facingSouth()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y+1));} }
                                                                                else if (world.facingWest()) { {if ("" != null) return world.isBlocked(new Point(world.getPosition().x+1,world.getPosition().y));} }
    throw new Error("Missing return statement in function");
}

  final public String isfacing() throws ParseException {String  listaRetorno ;
    jj_consume_token(ISFACING);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
listaRetorno="isfacing(north)";
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
listaRetorno="isfacing(south)";
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
listaRetorno="isfacing(east)";
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
listaRetorno="isfacing(west)";
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAR);
{if ("" != null) return listaRetorno;}
    throw new Error("Missing return statement in function");
}

  final public boolean isFacingNorth() throws ParseException {
{if ("" != null) return world.facingNorth();}
    throw new Error("Missing return statement in function");
}

  final public boolean isFacingSouth() throws ParseException {
{if ("" != null) return world.facingSouth();}
    throw new Error("Missing return statement in function");
}

  final public boolean isFacingEast() throws ParseException {
{if ("" != null) return world.facingEast();}
    throw new Error("Missing return statement in function");
}

  final public boolean isFacingWest() throws ParseException {
{if ("" != null) return world.facingWest();}
    throw new Error("Missing return statement in function");
}

  final public String zero() throws ParseException {String listaRetorno;
String valor;
    jj_consume_token(ZERO);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR:{
      jj_consume_token(VALOR);
      break;
      }
    case SIZE:{
      jj_consume_token(SIZE);
      break;
      }
    case MYX:{
      jj_consume_token(MYX);
      break;
      }
    case MYY:{
      jj_consume_token(MYY);
      break;
      }
    case MYCHIPS:{
      jj_consume_token(MYCHIPS);
      break;
      }
    case MYBALLOONS:{
      jj_consume_token(MYBALLOONS);
      break;
      }
    case BALLOONSHERE:{
      jj_consume_token(BALLOONSHERE);
      break;
      }
    case CHIPSHERE:{
      jj_consume_token(CHIPSHERE);
      break;
      }
    case ROOMFORCHIPS:{
      jj_consume_token(ROOMFORCHIPS);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
valor=token.image;
    jj_consume_token(RPAR);
listaRetorno="zero("+valor.toLowerCase()+")"; {if ("" != null) return listaRetorno;}
    throw new Error("Missing return statement in function");
}

  final public boolean zeroExec(String elemento) throws ParseException {boolean retorno= false;
if (elemento.equals("zero(size)")) {
                if (world.getN()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(myx)")) {
                if (world.getPosition().getX()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(myy)")) {
                if (world.getPosition().getY()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(mychips)")) {
                if (world.getMyChips()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(myballoons)")) {
                if (world.getMyBalloons()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(balloonshere)")) {
                if (world.countBalloons()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(chipshere)")) {
                if (world.chipsToPick()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(roomforchips)")) {
                if (world.freeSpacesForChips()==0) {
                        retorno = true;
                }
  }
  else if (elemento.equals("zero(0)")) {
                retorno = true;
  }
  {if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  final public void safeexecution() throws ParseException {String array;
int numero;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WALK:{
      array = walk();
numero = Integer.parseInt(array);
try { walk_accion(numero); }
                                catch (Error e) {
                                        System.out.println("Error en walk, no se ejecut\u00f3");
                                }
      break;
      }
    case JUMP:{
      array = jump();
numero = Integer.parseInt(array);
try { jump_accion(numero); }
                catch (Error e) {
                        System.out.println("Error en jump, no se ejecut\u00f3");
                }
      break;
      }
    case DROP:{
      array = drop();
numero = Integer.parseInt(array);
try { drop_accion(numero); }
                        catch (Error e) {
                                System.out.println("Error en drop, no se ejecut\u00f3");
                        }
      break;
      }
    case PICK:{
      array = pick();
numero = Integer.parseInt(array);
try { pick_accion(numero); }
                        catch (Error e) {
                                System.out.println("Error en pick, no se ejecut\u00f3");
                        }
      break;
      }
    case GRAB:{
      array = grab();
numero = Integer.parseInt(array);
try { grab_accion(numero); }
                        catch (Error e) {
                                System.out.println("Error en grab, no se ejecut\u00f3");
                        }
      break;
      }
    case LETGO:{
      array = letgo();
numero = Integer.parseInt(array);
try { letgo_accion(numero); }
                        catch (Error e) {
                                System.out.println("Error en letgo, no se ejecut\u00f3");
                        }
      break;
      }
    case POP:{
      array = pop();
numero = Integer.parseInt(array);
try { pop_accion(numero); }
                        catch (Error e) {
                                System.out.println("Error en pop, no se ejecut\u00f3");
                        }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void safeexe() throws ParseException {
    jj_consume_token(SAFEEXE);
    jj_consume_token(LPAR);
    safeexecution();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
}

  final public String condicion() throws ParseException {String resp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISBLOCKED:{
      resp = isblocked();
      break;
      }
    case ISFACING:{
      resp = isfacing();
      break;
      }
    case ZERO:{
      resp = zero();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return resp;}
    throw new Error("Missing return statement in function");
}

  final public String not() throws ParseException {String resp;
    not=true;
    jj_consume_token(NOT);
    jj_consume_token(LPAR);
resp = condicion();
    jj_consume_token(RPAR);
{if ("" != null) return resp;}
    throw new Error("Missing return statement in function");
}

  final public String obtenerCondicional() throws ParseException {String retorno;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      retorno = not();
      break;
      }
    case ISBLOCKED:
    case ISFACING:
    case ZERO:{
      retorno = condicion();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  final public String condicional() throws ParseException {String listaRetorno;
 boolean resp;
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    listaRetorno = obtenerCondicional();
    jj_consume_token(RPAR);
{if ("" != null) return listaRetorno;}
    throw new Error("Missing return statement in function");
}

  final public void llamarMacro() throws ParseException {String nombre;
  List<String > parametros = new ArrayList<String >();
  List<String > acciones = new ArrayList<String >();
    jj_consume_token(ELEMENTO);
nombre= token.image;
if (macroParametro.containsKey(nombre))
        { parametros = macroParametro.get(nombre); }
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR:{
      parametros = llamarParametros();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
System.out.println(macroAcciones.containsKey(nombre)); System.out.println(macroParametro.get(nombre).size());
if (macroAcciones.containsKey(nombre) && (parametros.size() == macroParametro.get(nombre).size()))
        { acciones = macroAcciones.get(nombre); }
for (String accion : acciones) {
            macroActual = nombre;
            System.out.println(accion);
            parseMacro(accion,parametros);
          }
}

  final public ArrayList<String > llamarParametros() throws ParseException {ArrayList<String > parametros= new ArrayList <String>();
String parametro;
    jj_consume_token(VALOR);
parametro = token.image; parametros.add(parametro); System.out.println(parametro);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 67:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_3;
      }
      jj_consume_token(67);
      jj_consume_token(VALOR);
parametro = token.image; parametros.add(parametro); System.out.println(parametro);
    }
{if ("" != null) return parametros;}
    throw new Error("Missing return statement in function");
}

  final public void definirMacro() throws ParseException {String nombre;
ArrayList <String > parametrosLista = new ArrayList<String >();
List<String > acciones = new ArrayList<String >();
    jj_consume_token(MACRO);
    jj_consume_token(ELEMENTO);
nombre= token.image;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELEMENTO:{
      parametrosLista = definirParametros();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRAC);
    acciones = definirAcciones(parametrosLista);
    jj_consume_token(RBRAC);
macroParametro.put(nombre, parametrosLista); macroAcciones.put(nombre, acciones);
}

  final public ArrayList<String > definirParametros() throws ParseException {ArrayList<String > parametros= new ArrayList <String>();
String parametro;
    jj_consume_token(ELEMENTO);
parametro = token.image; parametros.add(parametro);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 67:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_4;
      }
      jj_consume_token(67);
      jj_consume_token(ELEMENTO);
parametro = token.image; parametros.add(parametro);
    }
{if ("" != null) return parametros;}
    throw new Error("Missing return statement in function");
}

  final public List<String> definirAcciones(ArrayList<String> parametros) throws ParseException {List<String> acciones = new ArrayList<>();
        HashMap<String, Integer > posicionParametro = new HashMap<String,Integer >();
        String elemento;
        String accion;
        int cantidadParametros = 0;
int posicion=0;
    for (String parametro: parametros) {
      posicionParametro.put(parametro,posicion);
      posicion++;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TURNTOMY:
      case TURNTOTHE:
      case WALK:
      case JUMP:
      case DROP:
      case PICK:
      case GRAB:
      case LETGO:
      case POP:
      case MOVES:
      case NOP:
      case SAFEEXE:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WALK:{
        jj_consume_token(WALK);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELEMENTO:{
          jj_consume_token(ELEMENTO);
          break;
          }
        case VALOR:{
          jj_consume_token(VALOR);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("WALK" + " P(" + Integer.toString(cantidadParametros) + ")"+ ";");
                                cantidadParametros++;
                }
                else {
                                acciones.add("WALK("+elemento+");");
                 }
        break;
        }
      case JUMP:{
        jj_consume_token(JUMP);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELEMENTO:{
          jj_consume_token(ELEMENTO);
          break;
          }
        case VALOR:{
          jj_consume_token(VALOR);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("JUMP" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("JUMP("+elemento+");");
                 }
        break;
        }
      case DROP:{
        jj_consume_token(DROP);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELEMENTO:{
          jj_consume_token(ELEMENTO);
          break;
          }
        case VALOR:{
          jj_consume_token(VALOR);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("DROP" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("DROP("+elemento+");");
                 }
        break;
        }
      case PICK:{
        jj_consume_token(PICK);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELEMENTO:{
          jj_consume_token(ELEMENTO);
          break;
          }
        case VALOR:{
          jj_consume_token(VALOR);
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("PICK" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("PICK("+elemento+");");
                 }
        break;
        }
      case GRAB:{
        jj_consume_token(GRAB);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELEMENTO:{
          jj_consume_token(ELEMENTO);
          break;
          }
        case VALOR:{
          jj_consume_token(VALOR);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("GRAB" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("GRAB("+elemento+");");
                 }
        break;
        }
      case LETGO:{
        jj_consume_token(LETGO);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELEMENTO:{
          jj_consume_token(ELEMENTO);
          break;
          }
        case VALOR:{
          jj_consume_token(VALOR);
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("LETGO" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("LETGO("+elemento+");");
                 }
        break;
        }
      case POP:{
        jj_consume_token(POP);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELEMENTO:{
          jj_consume_token(ELEMENTO);
          break;
          }
        case VALOR:{
          jj_consume_token(VALOR);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("POP" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("POP("+elemento+");");
                 }
        break;
        }
      case TURNTOMY:{
        jj_consume_token(TURNTOMY);
        jj_consume_token(LPAR);
        jj_consume_token(ELEMENTO);
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("TURNTOMY" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("TURNTOMY("+elemento+");");
                 }
        break;
        }
      case TURNTOTHE:{
        jj_consume_token(TURNTOTHE);
        jj_consume_token(LPAR);
        jj_consume_token(ELEMENTO);
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("TURNTOTHE" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                cantidadParametros++;
                }
                else {
                                acciones.add("TURNTOTHE("+elemento+");");
                 }
        break;
        }
      case MOVES:{
        jj_consume_token(MOVES);
        jj_consume_token(LPAR);
        jj_consume_token(ELEMENTO);
elemento = token.image;
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                        acciones.add("MOVES" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                        cantidadParametros++;
                }
                else {
                        acciones.add("MOVES("+elemento+");");
                 }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 67:{
            ;
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            break label_6;
          }
          jj_consume_token(67);
          jj_consume_token(ELEMENTO);
elemento = token.image;
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                                        acciones.add("MOVES" + " P(" + Integer.toString(posicionParametro.get(elemento)) + ");");
                                                        cantidadParametros++;
                        }
                        else {
                                acciones.add("MOVES("+elemento+");");
                        }
        }
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
        break;
        }
      case NOP:{
        jj_consume_token(NOP);
        jj_consume_token(SEMI);
acciones.add("NOP;");
        break;
        }
      case SAFEEXE:{
        jj_consume_token(SAFEEXE);
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WALK:{
          jj_consume_token(WALK);
          break;
          }
        case JUMP:{
          jj_consume_token(JUMP);
          break;
          }
        case DROP:{
          jj_consume_token(DROP);
          break;
          }
        case PICK:{
          jj_consume_token(PICK);
          break;
          }
        case GRAB:{
          jj_consume_token(GRAB);
          break;
          }
        case LETGO:{
          jj_consume_token(LETGO);
          break;
          }
        case POP:{
          jj_consume_token(POP);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
accion= token.image;
        jj_consume_token(LPAR);
        jj_consume_token(ELEMENTO);
elemento = token.image;
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
        jj_consume_token(RPAR);
        jj_consume_token(SEMI);
if (parametros.contains(elemento) && cantidadParametros < parametros.size()) {
                                acciones.add("SAFEEXE" + " ("+ accion +"P(" + Integer.toString(posicionParametro.get(elemento)) + "););");
                                cantidadParametros++;
                }
                else {
                                acciones.add("SAFEEXE("+accion+"("+elemento+ "););");
                 }
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return acciones;}
    throw new Error("Missing return statement in function");
}

  final public String walk() throws ParseException {int numero;
String retorno;
    jj_consume_token(WALK);
    jj_consume_token(LPAR);
numero = valor();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
retorno=Integer.toString(numero); {if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  final public void walk_accion(int numero) throws ParseException {
numero =(int)numero;
world.moveForward(numero,false);  salida = "Command: WALK";
}

  final public String jump() throws ParseException {int numero;
    String resultado;
    jj_consume_token(JUMP);
    jj_consume_token(LPAR);
numero = valor();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
resultado = Integer.toString(numero); {if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public void jump_accion(int numero) throws ParseException {
world.moveForward(numero, true); salida = "Command: JUMP";
}

  final public String drop() throws ParseException {int numero;
 String resultado;
    jj_consume_token(DROP);
    jj_consume_token(LPAR);
numero = valor();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
resultado = Integer.toString(numero); {if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public void drop_accion(int numero) throws ParseException {
world.putChips(numero); salida = "Command: DROP";
}

  final public String pick() throws ParseException {int numero;
String resultado;
    jj_consume_token(PICK);
    jj_consume_token(LPAR);
numero = valor();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
resultado = Integer.toString(numero); {if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public void pick_accion(int numero) throws ParseException {
world.pickChips(numero); salida = "Command: PICK";
}

  final public String grab() throws ParseException {int numero;
String resultado;
    jj_consume_token(GRAB);
    jj_consume_token(LPAR);
numero = valor();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
resultado = Integer.toString(numero); {if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public void grab_accion(int numero) throws ParseException {
world.grabBalloons(numero); salida = "Command: GRAB";
}

  final public String letgo() throws ParseException {int numero;
String resultado;
    jj_consume_token(LETGO);
    jj_consume_token(LPAR);
numero = valor();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
resultado = Integer.toString(numero); {if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public void letgo_accion(int numero) throws ParseException {
world.putBalloons(numero); salida = "Command: LETGO";
}

  final public String pop() throws ParseException {int numero;
String resultado;
    jj_consume_token(POP);
    jj_consume_token(LPAR);
numero = valor();
    jj_consume_token(RPAR);
    jj_consume_token(SEMI);
resultado = Integer.toString(numero); {if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public void pop_accion(int numero) throws ParseException {
world.popBalloons(numero); salida = "Command: POP";
}

//boolean command(uniandes.lym.robot.view.Console sistema) :
  final public         boolean command(Console sistema) throws ParseException {int x,y;
                salida=new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MOV:
    case PUT:
    case GO:
    case HOP:
    case PICK:
    case POP:
    case EXEC:
    case NEW:
    case RIGHT:{
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXEC:
        case NEW:{
          inicial();
          break;
          }
        case RIGHT:{
          jj_consume_token(RIGHT);
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
world.turnRight();salida = "Command: Turnright";
          break;
          }
        case MOV:{
          jj_consume_token(MOV);
          jj_consume_token(LPAR);
          x = num();
          jj_consume_token(RPAR);
world.moveForward(x,false);salida = "Command: Moveforward ";
          break;
          }
        case HOP:{
          jj_consume_token(HOP);
          jj_consume_token(LPAR);
          x = num();
          jj_consume_token(RPAR);
world.moveForward(x,true);salida = "Command:Jumpforward ";
          break;
          }
        case GO:{
          jj_consume_token(GO);
          jj_consume_token(LPAR);
          x = num();
          jj_consume_token(67);
          y = num();
          jj_consume_token(RPAR);
world.setPostion(x,y);salida = "Command:GO ";
          break;
          }
        case PUT:{
          jj_consume_token(PUT);
          jj_consume_token(LPAR);
          put();
          jj_consume_token(RPAR);
          break;
          }
        case PICK:{
          jj_consume_token(PICK);
          jj_consume_token(LPAR);
          get();
          jj_consume_token(RPAR);
          break;
          }
        case POP:{
          jj_consume_token(POP);
          jj_consume_token(LPAR);
          x = num();
          jj_consume_token(RPAR);
world.popBalloons(x); salida = "Comando:  Pop";
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMI);
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MOV:
        case PUT:
        case GO:
        case HOP:
        case PICK:
        case POP:
        case EXEC:
        case NEW:
        case RIGHT:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_7;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void put() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(67);
      f = num();
world.putChips(f); salida = "Command:  Put Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(67);
      f = num();
world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(67);
      f = num();
world.pickChips(f);salida = "Command:  Pick chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(67);
      f = num();
world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public 
        int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                        {
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x4fff8000,0x4fff8000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe0000,0x7ff8000,0x9001e0,0x9001e0,0x9001e1,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x40000000,0xc0000,0x30000,0x1,0x1,0x0,0x1e00000,0x1e000000,0xff80,0xff80,0x1700000,0x0,0x1700000,0x1e00000,0x1e000000,0xff80,0x0,0x38,0x78,0x80,0x0,0x40000000,0x0,0x0,0x40000080,0x40000080,0x40000080,0x40000080,0x40000080,0x40000080,0x40000080,0x0,0x0,0x0,0x230000,0x230000,0x230000,0x80000000,0x80000000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x1,0x1,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[68];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 39; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 68; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
